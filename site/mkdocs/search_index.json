{
    "docs": [
        {
            "location": "/", 
            "text": "Developer docs for the tools and frameworks being developed at Rsquare Labs\n\n\ncore-client\n\n\nOpensource framework for building automation pipelines, tracking your research. \n\n\n Code on GitHub\n \n\n\n Documentation\n \n\n\n Fork Project\n\n\n\n\nchatbot AI\n\n\nChat Engine - Personal Research Assistant for Scientists and Developers.\n\n\n Code on GitHub\n \n\n\n Documentation\n \n\n\n Fork Project\n\n\n\n\n r2_console\n\n\nCommand line utility to monitor the research activity on a use machine.\n\n\n Code on GitHub\n \n\n\n Documentation\n \n\n\n Fork Project\n\n\n\n\n scraperbot\n\n\nScraper Bot, web scraping framework.\n\n\n Code on GitHub\n \n\n\n Documentation\n \n\n\n Fork Project", 
            "title": "Home"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nThe best way to contribute to the roadmap and feature discussions is by talking with the RSQUARELABS Team and \nrsquarelabs-core Community in realtime through the Gitter chat, or by starting a \nnew issue\n as a discussion thread.\n\n\n\n\nGot a Question or Problem\n\n\nBrowsing the code\n\n\nFound a Bug\n\n\nWant a feature\n\n\nContributing to the project\n\n\nSetting the Dev Env\n\n\nTesting\n\n\nCompatibility Issues\n\n\nWriting Documentation\n\n\nSubmitting a Pull Request\n\n\n\n\n\n\n\n\nSubmission Guidelines\n\n\n\n\nSubmitting an issue\n\n\n\n\n\n\n\n\nGit Commit Guidelines\n\n\n\n\nCode of Conduct\n\n\n\n\n Got a question or problem?\n\n\nSearch for your question or problem in the \nexisting issues\n or \ncreate a \nnew issue\n to start a new discussion thread. \n\n\nBrowsing the code?\n\n\nWe work on two branches: \n\n\n\n\n\n\nmaster\n for stable, released code\n\n\n\n\n\n\ndev\n, a development branch. \n\n\n\n\n\n\nIt might be important to distinguish them when you are reading the commit history \nsearching for a feature or a bugfix, or when you are unsure of where to base your work from when contributing.\n\n\nFound a bug?\n\n\nWe would like to hear about it. Please [submit an issue][#submitting-an-issue] on GitHub and we will follow up. Even better, we would appreciate a [Pull Request][new-pr] with a fix for it!\n\n\n\n\nIf the bug was found in a release, it is best to base your work on \nmaster\n and submit your PR against it.\n\n\nIf the bug was found on \ndev\n (the development branch), base your work on \ndev\n and submit your PR against it.\n\n\n\n\nPlease follow the [Pull Request Guidelines][#submitting-a-pull-request].  \n\n\n Want a feature?\n\n\nFeel free to request a feature by [submitting an issue][new-issue] on GitHub and open the discussion.\n\n\nIf you'd like to implement a new feature, please consider opening an issue first to talk about it. It may be that somebody is already working on it, or that there are particular issues that you should be aware of before implementing the change. If you are about to open a Pull Request, please make sure to follow the [submissions guidelines][new-pr].\n\n\nContributing to the project\n\n\n\n\nFork the \nrsquarelabs/framework\n repository! \n\n\nClone the repository to your local machine. \n\n\nSelect an issue from \nrsquarelabs/framework\n to work on or \n\nsubmit a proposal\n of your own.\n\n\nCreate a feature or hotfix, or fix  branch depending on the type of issue.\n\n\nWrite the \ntests\n needed, take care of Python 2 \n 3 compatibility issues. \n\n\nModify existing or add new \n.md\n files to the docs directory.\n\n\nAs you work, build the documentation site locally to see your changes using \nmkdocs serve\n.\n\n\nCheck your writing for style and mechanical errors.\n\n\nSquash your commits on your branch.\n\n\nMake a pull request from your fork back to  \nmaster\n branch.\n\n\nWork with the reviewers until your change is approved and merged.\n\n\n\n\nSetting the Dev Env\n\n\nTo start developing on rsquarelabs/framework, clone the repo:\nFrom the root of the repository:\n\n\n# Clone the project\ngit clone git@github.com:rsquarelabs/framework.git\n\n# Create the virtual environment\nvirtualenv venv\n\n# Install requirements\nvenv/bin/pip install -r requirements/dev-requirements.txt\n\n# Activate the environment\nsource venv/bin/activate\n\n# Access the commands\npython sbin/r2_gromacs.py init # for gromacs module\npython sbin/r2_server_start # start the webclient in localhost\n\n\n\n\n\nNote:\n You do not need a database or to run migrate.\n\n\nAll the changes should broadly follow the \nPEP 8\n style conventions, \nand we recommend you set up your editor to automatically indicate non-conforming styles.\n\n\nTesting\n\n\n\n\nWrite tests for all the code that you write, which includes writing the unittests to integration tests. \n\n\nAlways try to test the compatibility with Python versions 2x and 3x.\n\n\n\n\nCompatibility Issues\n\n\nSometimes, in order to ensure your code works on various different versions of R2-Core framework, \nPython or third party libraries, you'll need to run slightly different code depending on the environment. \nAny code that branches in this way should be isolated into the \ncompat.py\n module, \nand should provide a single common interface that the rest of the codebase can use.\n\n\nWriting Documentation\n\n\nThe documentation for R2-Core framework is built from the \nMarkdown\n source files in the \n\ndocs\n directory.\n\n\nThere are many great Markdown editors that make working with the documentation really easy. Test the documentation by seeing \nyour changes using \nmkdocs serve\n. You should be able to access the documentation locally at \nhttp://localhost:8000\n\n\nSubmitting a Pull Request\n\n\nThe pull request (PR) process is in place so that we can ensure changes made to the \ncodes are the best changes possible. A good PR will do some or all of the following:\n\n\n\n\nExplain why the change is needed\n\n\nPoint out potential issues or questions\n\n\nAsk for help from experts in the company or the community\n\n\nEncourage feedback from core developers and others involved in creating the software being documented.\n\n\nCheck if the code is Python 2 \n 3 compatible. \n\n\n\n\nWriting a PR that is singular in focus and has clear objectives will encourage all of the above. \nDone correctly, the process allows reviewers (maintainers and community members) \nto validate the claims of the documentation and identify potential problems in communication or presentation\n\n\n\n\nFirst of all, make sure to base your work on the \ndev\n branch (the development branch):   a bugfix branch for dev would be prefixed by \nfix/\n\n  # a bugfix branch for master would be prefixed by \nhotfix/\n\n\n\n\n$ git checkout -b feature/my-feature dev\n\n\n\n\n\n\nPlease create commits containing \nrelated changes\n. For example, two different bugfixes should produce two separate commits. A feature should be made of commits splitted by \nlogical chunks\n (no half-done changes). Use your best judgement as to how many commits your changes require.\n\n\n\n\n\n\nWrite insightful and descriptive commit messages. Also add the issue number to make more sense for the issue.\n Please provide a summary in the first line (50-72 characters) along with the issue number \n#\nissue_number\n in the commit message.\n\n\n\n\n\n\nPlease \ninclude the appropriate test cases\n for your patch.\n\n\n\n\n\n\nMake sure all tests pass before submitting your changes.\n\n\n\n\n\n\nMake sure the linter does not throw any error: \nmake lint\n.\n\n\n\n\n\n\nRebase your commits. It may be that new commits have been introduced on \ndev\n. Rebasing will update your branch with the most recent code and make your changes easier to review:\n\n\n\n\n\n\n$ git fetch \n git rebase origin/dev\n\n\n\n\nPush your changes:\n\n\n\n\n$ git push origin -u feature/my-feature\n\n\n\n\n\n\nOpen a pull request against the \ndev\n branch.\n\n\n\n\n\n\nIf we suggest changes:\n\n\n\n\nPlease make the required updates (after discussion if any)\n\n\n\n\nOnly create new commits if it makes sense. Generally, you will want to amend your latest commit or rebase your branch after the new changes:\n\n\n$ git rebase -i dev    # choose which commits to edit and perform the updates\n\n\n\n\n\n\nRe-run the test suite\n\n\n\n\n\n\nForce push to your branch:\n\n\n$ git push origin feature/my-feature -f\n\n\n\n\n\n\nOnce you've made a pull request take a look at the \nTravis build status\n in the GitHub interface and make sure \nthe tests are running as you'd expect.\nGitHub's documentation for working on pull requests is \navailable here\n.\n\n\nSubmitting an issue\n\n\nBefore you submit an issue, search the archive, maybe you will find that a similar one already exists.\n\n\nIf you are submitting an issue for a bug, please include the following:\n\n\n\n\nAn overview of the issue\n\n\nYour use case (why is this a bug for you?)\n\n\nThe version of rsquarelabs-core you are running\n\n\nThe platform you are running rsquarelabs-core on\n\n\nSteps to reproduce the issue\n\n\nLogfiles if available are helpful.\n\n\nIdeally, a suggested fix\n\n\n\n\nGit Commit Guidelines\n\n\nWe have very precise rules over how our git commit messages can be formatted. This leads to more readable messages that are easy to follow when looking through the project history. But also, we use the git commit messages to generate the AngularJS change log.\n\n\nThe commit message formatting can be added using a typical git workflow or through the use of a CLI wizard (\nCommitizen\n). To use the wizard, run npm run commit in your terminal after staging your changes in git.\n\n\nEvery Commit must be one of the following Type :\n\n\n\n\nfeat\n: A new feature\n\n\nfix\n: A bug fix\n\n\ndocs\n: Documentation only changes\n\n\nstyle\n: Changes that do not affect the meaning of the code (white-space, formatting, missing\n  semi-colons, etc)\n\n\nrefactor\n: A code change that neither fixes a bug nor adds a feature\n\n\nperf\n: A code change that improves performance\n\n\ntest\n: Adding missing tests\n\n\nchore\n: Changes to the build process or auxiliary tools and libraries such as documentation\n  generation\n\n\n\n\nCode of Conduct\n\n\nWe follow the code of conduct by \ncontributor-covenant.org\n\n\n\n\nWe are eager to see your contribution!\n\n\nWe collect all requests and ideas and share with the community for feedback, you should watch the milestones and issues for further roadmap updates.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "The best way to contribute to the roadmap and feature discussions is by talking with the RSQUARELABS Team and \nrsquarelabs-core Community in realtime through the Gitter chat, or by starting a  new issue  as a discussion thread.   Got a Question or Problem  Browsing the code  Found a Bug  Want a feature  Contributing to the project  Setting the Dev Env  Testing  Compatibility Issues  Writing Documentation  Submitting a Pull Request     Submission Guidelines   Submitting an issue     Git Commit Guidelines   Code of Conduct", 
            "title": "Contributing"
        }, 
        {
            "location": "/project-management/", 
            "text": "Project management\n\n\nThis document outlines our project management processes for R2-Core Framework.\n\n\nThe aim is to ensure that the project has a high \n\"bus factor\"\n, and can continue to remain well\n supported for the foreseeable future. Suggestions for improvements to our process are welcome.\n\n\n\n\nMaintenance team\n\n\nWe have a quarterly maintenance cycle where new members may join the maintenance team. \nWe currently cap the size of the team at 5 members, and may encourage folks to step out of the \nteam for a cycle to allow new members to participate.\n\n\nCurrent Team\n\n\nThe current maintenance team includes:\n\n\n\n\n@rrmerugu\n\n\n@nitish515\n\n\n\n\nMaintenance cycles\n\n\nEach maintenance cycle is initiated by an issue being opened with the \nProcess\n label.\n\n\nTo be considered for a maintainer role simply comment against the issue.\nExisting members must explicitly opt-in to the next cycle by check-marking their name.\nThe final decision on the incoming team will be made by \n@rrmerugu\n\n\nMembers of the maintenance team will be added as collaborators to the repository.\n\n\n\n\nResponsibilities of team members.\n\n\nTeam members have the following responsibilities.\n\n\n\n\nClose invalid or resolved tickets.\n\n\nAdd triage labels and milestones to tickets.\n\n\nMerge finalized pull requests.\n\n\nBuild and deploy the documentation, using \nmkdocs gh-deploy\n.\n\n\nBuild and update the included translation packs.\n\n\n\n\nFurther notes for maintainers:\n\n\n\n\nCode changes should come in the form of a pull request - do not push directly to master.\n\n\nMaintainers should typically not merge their own pull requests.\n\n\nEach issue/pull request should have exactly one label once triaged.\n\n\nSearch for un-triaged issues with \nis:open no:label\n.\n\n\n\n\nIt should be noted that participating actively in this project clearly \n\n does not require being part of the maintenance team\n. Almost every import part of issue triage and project \nimprovement can be actively worked on regardless of your collaborator status on the repository.\n\n\n\n\nRelease process\n\n\nThe release manager is selected on every quarterly maintenance cycle.\n\n\n\n\n\n\nThe manager should be selected by \n@rrmerugu\n.\n\n\n\n\n\n\nThe manager will then have the maintainer role added to PyPI package.\n\n\n\n\n\n\nThe previous manager will then have the maintainer role removed from the PyPI package.\n\n\n\n\n\n\nOur PyPI releases will be handled by either the current release manager, or by \n@rrmerugu\n. \nEvery release should have an open issue tagged with the \nRelease\n label and marked against the appropriate milestone.\n\n\nThe following template should be used for the description of the issue, and serves as a release checklist.\n\n\nRelease manager is @***.\nPull request is #***.\n\nDuring development cycle:\n\n- [ ] Upload the new content to be translated to [transifex](https://github.com/rsquarelabs/rsquarelabs-core/about/project-management/#translations).\n\n\nChecklist:\n\n- [ ] Create pull request for [release notes](https://github.com/rsquarelabs/rsquarelabs-core/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/rsquarelabs/rsquarelabs-core/milestones/***).\n- [ ] Ensure the pull request increments the version to `*.*.*` in [`rsquarelabs_core/__init__.py`](https://github.com/rsquarelabs/rsquarelabs-core/blob/master/rsquarelabs_core/__init__.py).\n- [ ] Confirm with @rrmerugu that release is finalized and ready to go.\n- [ ] Ensure that release date is included in pull request.\n- [ ] Merge the release pull request.\n- [ ] Push the package to PyPI with `./setup.py publish`.\n- [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`.\n- [ ] Deploy the documentation with `mkdocs gh-deploy`.\n- [ ] Make a release announcement on twitter.\n- [ ] Close the milestone on GitHub.\n\nTo modify this process for future releases make a pull request to the [project management](http://rsquarelabs.github.io/rsquarelabs-core/about/project-management/) documentation.\n\n\n\n\n\nrsquarelabs-core uses a time-based release schedule, with feature releases every eight months or so.\nAfter each feature release, the release manager will announce a timeline for the next feature release.\n\n\n\n\nProject requirements\n\n\nAll our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. \nWe maintain the requirements in the \nrequirements\n directory. The requirements files are referenced from the \ntox.ini\n\nconfiguration file, ensuring we have a single source of truth for package versions used in testing.\n\n\nPackage upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at \na newer version, by using the \npip list --outdated\n.\n\n\n\n\nProject ownership\n\n\nThe PyPI package is owned by \n@rrmerugu\n. As a backup \n@shivamsk\n also has ownership of the package.\n\n\nIf \n@rrmerugu\n ceases to participate in the project then \n@shivamsk\n has responsibility for handing over ownership duties.", 
            "title": "Project Management"
        }, 
        {
            "location": "/project-management/#project-management", 
            "text": "This document outlines our project management processes for R2-Core Framework.  The aim is to ensure that the project has a high  \"bus factor\" , and can continue to remain well\n supported for the foreseeable future. Suggestions for improvements to our process are welcome.", 
            "title": "Project management"
        }, 
        {
            "location": "/project-management/#maintenance-team", 
            "text": "We have a quarterly maintenance cycle where new members may join the maintenance team. \nWe currently cap the size of the team at 5 members, and may encourage folks to step out of the \nteam for a cycle to allow new members to participate.", 
            "title": "Maintenance team"
        }, 
        {
            "location": "/project-management/#current-team", 
            "text": "The current maintenance team includes:   @rrmerugu  @nitish515", 
            "title": "Current Team"
        }, 
        {
            "location": "/project-management/#maintenance-cycles", 
            "text": "Each maintenance cycle is initiated by an issue being opened with the  Process  label.  To be considered for a maintainer role simply comment against the issue.\nExisting members must explicitly opt-in to the next cycle by check-marking their name.\nThe final decision on the incoming team will be made by  @rrmerugu  Members of the maintenance team will be added as collaborators to the repository.", 
            "title": "Maintenance cycles"
        }, 
        {
            "location": "/project-management/#responsibilities-of-team-members", 
            "text": "Team members have the following responsibilities.   Close invalid or resolved tickets.  Add triage labels and milestones to tickets.  Merge finalized pull requests.  Build and deploy the documentation, using  mkdocs gh-deploy .  Build and update the included translation packs.   Further notes for maintainers:   Code changes should come in the form of a pull request - do not push directly to master.  Maintainers should typically not merge their own pull requests.  Each issue/pull request should have exactly one label once triaged.  Search for un-triaged issues with  is:open no:label .   It should be noted that participating actively in this project clearly   does not require being part of the maintenance team . Almost every import part of issue triage and project \nimprovement can be actively worked on regardless of your collaborator status on the repository.", 
            "title": "Responsibilities of team members."
        }, 
        {
            "location": "/project-management/#release-process", 
            "text": "The release manager is selected on every quarterly maintenance cycle.    The manager should be selected by  @rrmerugu .    The manager will then have the maintainer role added to PyPI package.    The previous manager will then have the maintainer role removed from the PyPI package.    Our PyPI releases will be handled by either the current release manager, or by  @rrmerugu . \nEvery release should have an open issue tagged with the  Release  label and marked against the appropriate milestone.  The following template should be used for the description of the issue, and serves as a release checklist.  Release manager is @***.\nPull request is #***.\n\nDuring development cycle:\n\n- [ ] Upload the new content to be translated to [transifex](https://github.com/rsquarelabs/rsquarelabs-core/about/project-management/#translations).\n\n\nChecklist:\n\n- [ ] Create pull request for [release notes](https://github.com/rsquarelabs/rsquarelabs-core/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/rsquarelabs/rsquarelabs-core/milestones/***).\n- [ ] Ensure the pull request increments the version to `*.*.*` in [`rsquarelabs_core/__init__.py`](https://github.com/rsquarelabs/rsquarelabs-core/blob/master/rsquarelabs_core/__init__.py).\n- [ ] Confirm with @rrmerugu that release is finalized and ready to go.\n- [ ] Ensure that release date is included in pull request.\n- [ ] Merge the release pull request.\n- [ ] Push the package to PyPI with `./setup.py publish`.\n- [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`.\n- [ ] Deploy the documentation with `mkdocs gh-deploy`.\n- [ ] Make a release announcement on twitter.\n- [ ] Close the milestone on GitHub.\n\nTo modify this process for future releases make a pull request to the [project management](http://rsquarelabs.github.io/rsquarelabs-core/about/project-management/) documentation.  rsquarelabs-core uses a time-based release schedule, with feature releases every eight months or so.\nAfter each feature release, the release manager will announce a timeline for the next feature release.", 
            "title": "Release process"
        }, 
        {
            "location": "/project-management/#project-requirements", 
            "text": "All our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. \nWe maintain the requirements in the  requirements  directory. The requirements files are referenced from the  tox.ini \nconfiguration file, ensuring we have a single source of truth for package versions used in testing.  Package upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at \na newer version, by using the  pip list --outdated .", 
            "title": "Project requirements"
        }, 
        {
            "location": "/project-management/#project-ownership", 
            "text": "The PyPI package is owned by  @rrmerugu . As a backup  @shivamsk  also has ownership of the package.  If  @rrmerugu  ceases to participate in the project then  @shivamsk  has responsibility for handing over ownership duties.", 
            "title": "Project ownership"
        }, 
        {
            "location": "/release-cycle/", 
            "text": "Release Management\n\n\nRelease Versioning\n\n\nSince version 1.0, rsquarelabs-core\u2019s release numbering works as follows:\n\n\n\n\n\n\nVersions are numbered in the form \nA.B\n or \nA.B.C\n.\n\n\n\n\n\n\nA.B\n is the feature release version number. Each version will be \nmostly backwards compatible with the previous release. Exceptions to this \nrule will be listed in the release notes.\n\n\n\n\n\n\nC\n is the patch release version number, which is incremented for \nbugfix and security releases. \nThese releases will be 100% backwards-compatible with the previous patch release. \nThe only exception is when a security or data loss issue can\u2019t be fixed without breaking \nbackwards-compatibility. If this happens, the release notes will provide detailed upgrade instructions.\n\n\n\n\n\n\nBefore a new feature release, we\u2019ll make alpha, beta, and release candidate releases. \nThese are of the form \nA.B alpha/beta/rc N\n, which means the \nNth alpha/beta/release\n candidate of version \nA.B\n.\n\n\n\n\n\n\nIn git, each release will have a tag indicating its version number, signed \nwith the release key. Additionally, each release series has its own branch, \ncalled \nstable/A.B.x\n, and bugfix/security releases will be issued from those branches.\n\n\nFeature release\n\n\nFeature releases (A.B, A.B+1, etc.) will happen roughly every eight months \u2013 see release process for details. These releases will contain new features, improvements to existing features, and such.\n\n\nPatch release\n\n\nPatch releases (A.B.C, A.B.C+1, etc.) will be issued as needed, to fix bugs and/or security issues.\n\n\nThese releases will be 100% compatible with the associated feature release, unless this is \nimpossible for security reasons or to prevent data loss. So the answer to \u201cshould I upgrade \nto the latest patch release?\u201d will always be \u201cyes.\u201d\n\n\nLong-term support release\n\n\nCertain feature releases will be designated as long-term support (LTS) releases. These releases will get security and data loss fixes applied for a guaranteed period of time, typically three years.\n\n\n\n\nSupported versions\n\n\nAt any moment in time, developer team will support a set of releases to varying levels.\n\n\n\n\n\n\nThe current development master will get new features and bug fixes requiring non-trivial refactoring.\n\n\n\n\n\n\nPatches applied to the master branch must also be applied to the last feature release branch, to be released in the next patch release of that feature series, when they fix critical problems:\n\n\n\n\nSecurity issues.\n\n\nData loss bugs.\n\n\nCrashing bugs.\n\n\nMajor functionality bugs in newly-introduced features.\n\n\nRegressions from older versions of rsquarelabs-core.\n\n\n\n\n\n\n\n\nThe rule of thumb is that fixes will be backported to the last feature release \nfor bugs that would have prevented a release in the first place (release blockers).\n\n\n\n\n\n\nSecurity fixes and data loss bugs will be applied to the current master, \nthe last two feature release branches, and any other supported long-term \nsupport release branches.\n\n\n\n\n\n\nDocumentation fixes generally will be more freely backported to the last \nrelease branch. That\u2019s because it\u2019s highly advantageous to have the docs \nfor the last release be up-to-date and correct, and the risk of introducing \nregressions is much less of a concern.\n\n\n\n\n\n\nAs a concrete example, consider a moment in time halfway between the release \nof rsquarelabs-core 5.1 and 5.2. At this point in time:\n\n\n\n\n\n\nFeatures will be added to development master, to be released as rsquarelabs-core 5.2.\n\n\n\n\n\n\nCritical bug fixes will be applied to the stable/5.1.x branch, and released as 5.1.1, 5.1.2, etc.\n\n\n\n\n\n\nSecurity fixes and bug fixes for data loss issues will be applied to master and to the stable/5.1.x, stable/5.0.x, and stable/4.2.x (LTS) branches. They will trigger the release of 5.1.1, 5.0.5, 4.2.8, etc.\n\n\n\n\n\n\nDocumentation fixes will be applied to master, and, if easily backported, to the latest stable branch, 5.1.x.\n\n\n\n\n\n\n\n\nRelease cycle\n\n\nEach release cycle consists of three parts:\n\n\nPhase one: feature proposal\n\n\nThe first phase of the release process will include figuring out what major features to include in the next version. This should include a good deal of preliminary work on those features \u2013 working code trumps grand design.\n\n\nMajor features for an upcoming release will be added to the wiki roadmap page, e.g. https://github.com/rsquarelabs/rsquarelabs-core/wiki/ROADMAP.\n\n\nPhase two: development\n\n\nThe second part of the release schedule is the \u201cheads-down\u201d working period. Using the roadmap produced at the end of phase one, we\u2019ll all work very hard to get everything on it done.\n\n\nAt the end of phase two, any unfinished features will be postponed until the next release.\n\n\nPhase two will culminate with an alpha release. At this point, the stable/A.B.x branch will be forked from master.\n\n\nPhase three: bugfixes\n\n\nThe last third of a release cycle is spent fixing bugs \u2013 no new features will be accepted during this time. We\u2019ll try to release a beta release after one month and a release candidate after two months.\n\n\nThe release candidate marks the string freeze, and it happens at least two weeks before the final release. After this point, new translatable strings must not be added.\n\n\nDuring this phase, committers will be more and more conservative with backports, to avoid introducing regressions. After the release candidate, only release blockers and documentation fixes should be backported.\n\n\nIn parallel to this phase, \nmaster\n can receive new features, to be released in the \nA.B+1\n cycle.\n\n\n\n\nBug-fix releases\n\n\nAfter a major release (e.g. A.B), the previous release will go into bugfix mode.\n\n\nThe branch for the previous major release (e.g. \nstable/A.B-1.x\n) will include \nbugfixes. Critical bugs fixed on master must also be fixed on the bugfix branch; \nthis means that commits need to cleanly separate bug fixes from feature additions. \nThe developer who commits a fix to master will be responsible for also applying \nthe fix to the current bugfix branch.", 
            "title": "Release Cycle"
        }, 
        {
            "location": "/release-cycle/#release-management", 
            "text": "", 
            "title": "Release Management"
        }, 
        {
            "location": "/release-cycle/#release-versioning", 
            "text": "Since version 1.0, rsquarelabs-core\u2019s release numbering works as follows:    Versions are numbered in the form  A.B  or  A.B.C .    A.B  is the feature release version number. Each version will be \nmostly backwards compatible with the previous release. Exceptions to this \nrule will be listed in the release notes.    C  is the patch release version number, which is incremented for \nbugfix and security releases. \nThese releases will be 100% backwards-compatible with the previous patch release. \nThe only exception is when a security or data loss issue can\u2019t be fixed without breaking \nbackwards-compatibility. If this happens, the release notes will provide detailed upgrade instructions.    Before a new feature release, we\u2019ll make alpha, beta, and release candidate releases. \nThese are of the form  A.B alpha/beta/rc N , which means the  Nth alpha/beta/release  candidate of version  A.B .    In git, each release will have a tag indicating its version number, signed \nwith the release key. Additionally, each release series has its own branch, \ncalled  stable/A.B.x , and bugfix/security releases will be issued from those branches.", 
            "title": "Release Versioning"
        }, 
        {
            "location": "/release-cycle/#feature-release", 
            "text": "Feature releases (A.B, A.B+1, etc.) will happen roughly every eight months \u2013 see release process for details. These releases will contain new features, improvements to existing features, and such.", 
            "title": "Feature release"
        }, 
        {
            "location": "/release-cycle/#patch-release", 
            "text": "Patch releases (A.B.C, A.B.C+1, etc.) will be issued as needed, to fix bugs and/or security issues.  These releases will be 100% compatible with the associated feature release, unless this is \nimpossible for security reasons or to prevent data loss. So the answer to \u201cshould I upgrade \nto the latest patch release?\u201d will always be \u201cyes.\u201d", 
            "title": "Patch release"
        }, 
        {
            "location": "/release-cycle/#long-term-support-release", 
            "text": "Certain feature releases will be designated as long-term support (LTS) releases. These releases will get security and data loss fixes applied for a guaranteed period of time, typically three years.", 
            "title": "Long-term support release"
        }, 
        {
            "location": "/release-cycle/#supported-versions", 
            "text": "At any moment in time, developer team will support a set of releases to varying levels.    The current development master will get new features and bug fixes requiring non-trivial refactoring.    Patches applied to the master branch must also be applied to the last feature release branch, to be released in the next patch release of that feature series, when they fix critical problems:   Security issues.  Data loss bugs.  Crashing bugs.  Major functionality bugs in newly-introduced features.  Regressions from older versions of rsquarelabs-core.     The rule of thumb is that fixes will be backported to the last feature release \nfor bugs that would have prevented a release in the first place (release blockers).    Security fixes and data loss bugs will be applied to the current master, \nthe last two feature release branches, and any other supported long-term \nsupport release branches.    Documentation fixes generally will be more freely backported to the last \nrelease branch. That\u2019s because it\u2019s highly advantageous to have the docs \nfor the last release be up-to-date and correct, and the risk of introducing \nregressions is much less of a concern.    As a concrete example, consider a moment in time halfway between the release \nof rsquarelabs-core 5.1 and 5.2. At this point in time:    Features will be added to development master, to be released as rsquarelabs-core 5.2.    Critical bug fixes will be applied to the stable/5.1.x branch, and released as 5.1.1, 5.1.2, etc.    Security fixes and bug fixes for data loss issues will be applied to master and to the stable/5.1.x, stable/5.0.x, and stable/4.2.x (LTS) branches. They will trigger the release of 5.1.1, 5.0.5, 4.2.8, etc.    Documentation fixes will be applied to master, and, if easily backported, to the latest stable branch, 5.1.x.", 
            "title": "Supported versions"
        }, 
        {
            "location": "/release-cycle/#release-cycle", 
            "text": "Each release cycle consists of three parts:", 
            "title": "Release cycle"
        }, 
        {
            "location": "/release-cycle/#phase-one-feature-proposal", 
            "text": "The first phase of the release process will include figuring out what major features to include in the next version. This should include a good deal of preliminary work on those features \u2013 working code trumps grand design.  Major features for an upcoming release will be added to the wiki roadmap page, e.g. https://github.com/rsquarelabs/rsquarelabs-core/wiki/ROADMAP.", 
            "title": "Phase one: feature proposal"
        }, 
        {
            "location": "/release-cycle/#phase-two-development", 
            "text": "The second part of the release schedule is the \u201cheads-down\u201d working period. Using the roadmap produced at the end of phase one, we\u2019ll all work very hard to get everything on it done.  At the end of phase two, any unfinished features will be postponed until the next release.  Phase two will culminate with an alpha release. At this point, the stable/A.B.x branch will be forked from master.", 
            "title": "Phase two: development"
        }, 
        {
            "location": "/release-cycle/#phase-three-bugfixes", 
            "text": "The last third of a release cycle is spent fixing bugs \u2013 no new features will be accepted during this time. We\u2019ll try to release a beta release after one month and a release candidate after two months.  The release candidate marks the string freeze, and it happens at least two weeks before the final release. After this point, new translatable strings must not be added.  During this phase, committers will be more and more conservative with backports, to avoid introducing regressions. After the release candidate, only release blockers and documentation fixes should be backported.  In parallel to this phase,  master  can receive new features, to be released in the  A.B+1  cycle.", 
            "title": "Phase three: bugfixes"
        }, 
        {
            "location": "/release-cycle/#bug-fix-releases", 
            "text": "After a major release (e.g. A.B), the previous release will go into bugfix mode.  The branch for the previous major release (e.g.  stable/A.B-1.x ) will include \nbugfixes. Critical bugs fixed on master must also be fixed on the bugfix branch; \nthis means that commits need to cleanly separate bug fixes from feature additions. \nThe developer who commits a fix to master will be responsible for also applying \nthe fix to the current bugfix branch.", 
            "title": "Bug-fix releases"
        }
    ]
}