<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>django on Ravi Raja Merugu</title><link>https://rrmerugu.github.io/categories/django/</link><description>Recent content in django on Ravi Raja Merugu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://rrmerugu.github.io/categories/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django Fake data</title><link>https://rrmerugu.github.io/posts/django-fake-data/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://rrmerugu.github.io/posts/django-fake-data/</guid><description>django-autofixture(https://github.com/gregmuellegger/django-autofixture) inserts the fake data into the models with no scripting . It gets the data up and running in single command python manage.py loadtestdata blog.BlogPost:100.
I wish the fake data is in good english, but it&amp;rsquo;s a good start.</description></item><item><title>Django - why ajax for pages ? we have Pjax</title><link>https://rrmerugu.github.io/posts/django-why-ajax-we-have-pjax/</link><pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate><guid>https://rrmerugu.github.io/posts/django-why-ajax-we-have-pjax/</guid><description>Pjax(https://github.com/defunkt/jquery-pjax) is a jQuery plugin a standalone JavaScript module that uses ajax (XmlHttpRequest) and pushState() to deliver a fast browsing experience.
Typically django serves each page with a entire page reload, costing performance. Using Pjax, its we convert our django application into a light weight server rendered SPA :) , Lets know how awesome is that..
Here is how to use it and code is hosted at https://github.com/rrmerugu/django-pjaxified.
Step1: Fork and Clone the repo git clone https://github.</description></item></channel></rss>